{
    "sourceFile": "src/main.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1678868539995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1678870600653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { NestFactory } from '@nestjs/core';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n+\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule);\n   await app.listen(3000);\n }\n"
                },
                {
                    "date": 1678870749481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n import { NestFactory } from '@nestjs/core';\n+import { FastifyAdapter } from '@nestjs/platform-fastify';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n-\n+  const adapter = new FastifyAdapter();\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n-  const app = await NestFactory.create(AppModule);\n+  const app = await NestFactory.create(AppModule, adapter);\n   await app.listen(3000);\n }\n bootstrap();\n"
                },
                {
                    "date": 1678870819681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+import { NestFactory } from '@nestjs/core';\n+import { FastifyAdapter } from '@nestjs/platform-fastify';\n+import { AppModule } from './app.module';\n+\n+async function bootstrap() {\n+  const adapter = new FastifyAdapter();\n+  //\n+  adapter.register()\n+  //\n+\n+  //\n+  // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n+  const app = await NestFactory.create(AppModule, adapter);\n+  await app.listen(3000);\n+}\n+bootstrap();\n"
                },
                {
                    "date": 1678871117874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,20 @@\n+import fastifyHelmet from '@fastify/helmet';\n import { NestFactory } from '@nestjs/core';\n import { FastifyAdapter } from '@nestjs/platform-fastify';\n+import { config } from 'process';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n   const adapter = new FastifyAdapter();\n   //\n-  adapter.register()\n+  adapter.register(fastifyHelmet, {\n+    contentSecurityPolicy: config.csp, // 在使用fastify-swagger和helmet时有CSP冲突，非生产关闭\n+  });\n   //\n \n   //\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n   await app.listen(3000);\n }\n bootstrap();\n-import { NestFactory } from '@nestjs/core';\n-import { FastifyAdapter } from '@nestjs/platform-fastify';\n-import { AppModule } from './app.module';\n-\n-async function bootstrap() {\n-  const adapter = new FastifyAdapter();\n-  // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n-  const app = await NestFactory.create(AppModule, adapter);\n-  await app.listen(3000);\n-}\n-bootstrap();\n"
                },
                {
                    "date": 1678871187411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n async function bootstrap() {\n   const adapter = new FastifyAdapter();\n   //\n   adapter.register(fastifyHelmet, {\n-    contentSecurityPolicy: config.csp, // 在使用fastify-swagger和helmet时有CSP冲突，非生产关闭\n+    // contentSecurityPolicy: config.csp, // 在使用fastify-swagger和helmet时有CSP冲突，非生产关闭\n   });\n   //\n \n   //\n"
                },
                {
                    "date": 1678871293998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-import fastifyHelmet from '@fastify/helmet';\n+import helmet from '@fastify/helmet';\n import { NestFactory } from '@nestjs/core';\n import { FastifyAdapter } from '@nestjs/platform-fastify';\n import { config } from 'process';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n   const adapter = new FastifyAdapter();\n   //\n-  adapter.register(fastifyHelmet, {\n+  adapter.register(helmet, {\n     // contentSecurityPolicy: config.csp, // 在使用fastify-swagger和helmet时有CSP冲突，非生产关闭\n   });\n   //\n \n"
                },
                {
                    "date": 1678871335350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import fastifyCompress from '@fastify/compress';\n import helmet from '@fastify/helmet';\n import { NestFactory } from '@nestjs/core';\n import { FastifyAdapter } from '@nestjs/platform-fastify';\n import { config } from 'process';\n@@ -9,9 +10,10 @@\n   //\n   adapter.register(helmet, {\n     // contentSecurityPolicy: config.csp, // 在使用fastify-swagger和helmet时有CSP冲突，非生产关闭\n   });\n-  //\n+  // 压缩请求\n+  adapter.register(fastifyCompress);\n \n   //\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n"
                },
                {
                    "date": 1678871347923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import fastifyCompress from '@fastify/compress';\n+import compress from '@fastify/compress';\n import helmet from '@fastify/helmet';\n import { NestFactory } from '@nestjs/core';\n import { FastifyAdapter } from '@nestjs/platform-fastify';\n import { config } from 'process';\n@@ -11,9 +11,9 @@\n   adapter.register(helmet, {\n     // contentSecurityPolicy: config.csp, // 在使用fastify-swagger和helmet时有CSP冲突，非生产关闭\n   });\n   // 压缩请求\n-  adapter.register(fastifyCompress);\n+  adapter.register(compress);\n \n   //\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n"
                },
                {
                    "date": 1678871397229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import compress from '@fastify/compress';\n import helmet from '@fastify/helmet';\n+import fastifyRateLimit from '@fastify/rate-limit';\n import { NestFactory } from '@nestjs/core';\n import { FastifyAdapter } from '@nestjs/platform-fastify';\n import { config } from 'process';\n import { AppModule } from './app.module';\n@@ -13,8 +14,14 @@\n   });\n   // 压缩请求\n   adapter.register(compress);\n \n+  // 速率限制器\n+  adapter.register(fastifyRateLimit, {\n+    max: 100,\n+    timeWindow: 6000,\n+  });\n+\n   //\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n   await app.listen(3000);\n"
                },
                {
                    "date": 1678871605508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import compress from '@fastify/compress';\n+import fastifyCookie from '@fastify/cookie';\n import helmet from '@fastify/helmet';\n import fastifyRateLimit from '@fastify/rate-limit';\n import { NestFactory } from '@nestjs/core';\n import { FastifyAdapter } from '@nestjs/platform-fastify';\n@@ -14,16 +15,19 @@\n   });\n   // 压缩请求\n   adapter.register(compress);\n \n-  // 速率限制器\n+  // 速率限制器（based on their IP address）：限制访问频率，防刷\n   adapter.register(fastifyRateLimit, {\n     max: 100,\n     timeWindow: 6000,\n   });\n \n   //\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n+\n+  // cookie\n+  app.registerRequestByContextId(fastifyCookie);\n   await app.listen(3000);\n }\n bootstrap();\n"
                },
                {
                    "date": 1678871611363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,8 @@\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n \n   // cookie\n-  app.registerRequestByContextId(fastifyCookie);\n+  app.register(fastifyCookie);\n   await app.listen(3000);\n }\n bootstrap();\n"
                },
                {
                    "date": 1678871632392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,8 @@\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n \n   // cookie\n-  app.register(fastifyCookie);\n+  app.use(fastifyCookie);\n   await app.listen(3000);\n }\n bootstrap();\n"
                },
                {
                    "date": 1678871712105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create(AppModule, adapter);\n \n   // cookie\n-  app.use(fastifyCookie);\n+  app.register(fastifyCookie);\n+\n   await app.listen(3000);\n }\n bootstrap();\n"
                },
                {
                    "date": 1678871720824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   });\n \n   //\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n-  const app = await NestFactory.create(AppModule, adapter);\n+  const app = await NestFactory.create<NestFastifyApplication>(AppModule, adapter);\n \n   // cookie\n   app.register(fastifyCookie);\n \n"
                },
                {
                    "date": 1678871738541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import fastifyCookie from '@fastify/cookie';\n import helmet from '@fastify/helmet';\n import fastifyRateLimit from '@fastify/rate-limit';\n import { NestFactory } from '@nestjs/core';\n-import { FastifyAdapter } from '@nestjs/platform-fastify';\n+import { FastifyAdapter, NestFastifyApplication } from '@nestjs/platform-fastify';\n import { config } from 'process';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n@@ -26,9 +26,9 @@\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create<NestFastifyApplication>(AppModule, adapter);\n \n   // cookie\n-  app.register(fastifyCookie);\n+  app.use(fastifyCookie);\n \n   await app.listen(3000);\n }\n bootstrap();\n"
                },
                {
                    "date": 1678871756439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n   const app = await NestFactory.create<NestFastifyApplication>(AppModule, adapter);\n \n   // cookie\n-  app.use(fastifyCookie);\n+  app.register(fastifyCookie);\n \n   await app.listen(3000);\n }\n bootstrap();\n"
                },
                {
                    "date": 1678871876608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import fastifyRateLimit from '@fastify/rate-limit';\n import { NestFactory } from '@nestjs/core';\n import {\n   FastifyAdapter,\n-  NestFastifyApplication\n+  NestFastifyApplication,\n } from '@nestjs/platform-fastify';\n import { config } from 'process';\n import { AppModule } from './app.module';\n \n"
                }
            ],
            "date": 1678868539995,
            "name": "Commit-0",
            "content": "import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  // 仅启动了 HTTP 侦听器，该侦听器使应用程序可以侦听入栈的 HTTP 请求。\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n"
        }
    ]
}